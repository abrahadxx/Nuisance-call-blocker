\ serial.8th  General purpose serial io words

\ uses separate task to monitor input

"serial" .cf

0x10 constant <DLE>
0x03 constant <ETX>
0x0d constant <CR>
0x0a constant <LF>
0x1b constant <ESC>
0x07 constant <BEL>	

"\x10\x03" constant <DLE><ETX>

null var, port

: sio_setup	\ ( -- ) Note: must have dtrctl and rtsctl set to 1 for "hardware" handshake
	cr "sio_setup" . cr
	port @
 {
	"inxon":	false,
	"outxon":	false,
	"txcxoff":	false,
	"outdsr":	false,
	"eofchar":	0,
	"errchar":	0,
	"xoffchar":	19,
	"xonchar":	17,
	"baud":		38400,
	"bytesize":	8,
	"dtrctl":	1,
	"rtsctl":	1,
	"outcts":	false,
	"stopbits":	1,
	"faborterr":false,
	"parity":	false,
	"paritybits":	0,
	"xonlim":	2048,
	"xofflim":	512
 }   sio:opts! drop 
;

"" var, inp_buff		\ stores chars read from serial port
"" var, out_buff		\ stores chars to be output

: srl_in?	\ ( -- f) true if srl buffer not empty
	inp_buff lock @ s:len inp_buff unlock drop nip ;

: clear_serial
	repeat
		"" clear inp_buff lock !
		inp_buff unlock drop 
		0.1 sleep 
		srl_in?	
	while!	;	


modem? @ #if
	
: check_out		\ (sio -- sio ) if anything in out_buff send to serial port
		out_buff lock @ s:len 
		if  sio:write "" s:clear out_buff ! then 
		drop
		out_buff unlock drop ;
		
: check_in		\ ( sio -- sio)		
		"" s:clear 1000 sio:read null? nip
		if
			drop
		else
			inp_buff lock @ swap s:+ inp_buff ! inp_buff unlock drop
			cbtask_id @ t:notify			\ wake up main task
		then ;

#else

: check_out		\ (sio -- sio ) if anything in out_buff send to serial port
		out_buff lock @ s:len 
		if  "" s:clear out_buff ! then 
		out_buff unlock drop ;

: check_in		\ ( sio -- sio)		
		con:key?
		if
			con:key 
			dup <ESC> n:= if drop <BEL> t:main t:notify then
			dup putc dup <CR> n:= if <LF> putc then 
			inp_buff lock @ swap s:+ inp_buff ! inp_buff unlock drop
			cbtask_id @ t:notify			\ wake up main task
		then ;

#then	

: serial_io		\ ( -- ) task to manage serial data
	inp_buff @ s:clear inp_buff !
	out_buff @ s:clear out_buff !
	port @							\ keep sio on stack
	repeat
		check_out					\ out_buff to serial port
		check_in					\ serial input to inp_buff
		1 sleep
	again drop ;



: serial_init		\ ( --)
	port @ null? nip
	if			
		com_port @ sio:open port !
	then 
	sio_setup ;

: start_serial_task
	' serial_io t:task
	srl_task_id !
	;

: close_serial
	srl_task_id @ 1 t:kill
	port @ null; 
	sio:close 
	null port ! ;	

: send_string	\ ( c/string-- )	send byte or string to sio
	out_buff lock @ swap s:+ out_buff ! out_buff unlock drop 
	srl_task_id @ t:notify ;			\ wake up serial task to send data
		
		
: (get_line)		\ (  -- s ) line terminated in cr or an empty string
	inp_buff lock @ 
	<CR> s:search
	null?	if						\ no cr
					2drop "" 			\ return empty string
			else
					n:1+ s:/			\ split string at cr
					1 a:@				\ get remainder or null if none
					null? if drop "" s:clear then
					inp_buff !
					0 a:@ nip			\ get line
			then
	inp_buff unlock drop ;
		


: get_line				\  (  -- s )  wait for none empty line
	srl_task_id @ t:notify
	0
	repeat
		drop
		0.1 sleep
		(get_line) s:ltrim s:rtrim
		s:len 
	until! 
	;	

\ terminal for testing

: dummy repeat -1 sleep again ;

\ switch modes with ctrl+t for text and ctrl+n for numbers in hex
	
true var, text_mode		\ displays recvd chars as text if True and numbers if False 

: display_char	\ ( "c" -- )
	text_mode @ if  . 
				else hex 0 s:@ . drop space decimal 
				then ;
				
: instructions	cr "^T-Text  ^N-Hex   ^P-send <DLE><ETX>    <ESC>-Exit" . cr ;
	
: term
	serial_init
	' dummy t:task cbtask_id !			\ so notify from serial task doesn't crash
	start_serial_task
	instructions
	repeat
		con:key? if 
					con:key 
					dup 27 n:= if drop ;; then		\ end if <ESC> key pressed
					dup 31 n:>						\ not control chr
					if	dup putc send_string		\ echo to screen and send to serial
					else
						dup 20 n:= if true  text_mode ! "Text mode\n" . then  	\ 20 is ctrl+t  for text mode
						dup 14 n:= if false text_mode ! "Hex mode\n"  . then  	\ 14 is ctrl+n  for hex mode
						dup 16 n:= if <DLE><ETX> send_string		    then	\ 16 is ctrl+p to send end of data string
						    13 n:= if "\r\n" send_string cr 			then			
					then
				 then
		(get_line) s:len if text_mode @ if . else hex dump$  then else drop then
	again 
	kill_tasks
	close_serial ;						
.s	
