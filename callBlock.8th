\ main Call Blocker file   callBlock.8th

 
"C:\\.8th\\DATA\\" var, datadir
 "COM5" var, com_port	\ USRobotics		
\ "COM3" var, com_port	\ Soundblaster		


\ ************************************************************


datadir @ 
dup	"LOG.TXT"		s:+ var, logfile		
dup	"WHITELIST.TXT"	s:+ var, whitefile		
dup	"BLACKLIST.TXT"	s:+ var, blackfile		
dup	"SOUND3.WAV" 	s:+ var, soundfile	
drop

 "" var, action			\ string to describe how call was dealt with	
 
needs sio\serial.8th
needs callblock\modem.8th
needs callblock\files.8th
needs callblock\audio.8th  \ plays sound file to blocked callers if voice == True.


\ needs callblock\test.8th

\ Modem returns following lines on an incoming call

\ RING
\
\ DATE=0417
\ 
\ TIME=2232
\
\ NMBR=07910414576
\
\ RING
\ 
\ RING .......
\
\ ------------ OR if number witheld ----------------
\
\ DATE=0417
\ 
\ TIME=2232
\
\ NMBR=PRIVATE  or P
\
\ RING
\ 
\ RING .......
\ *********************************************

true var, voice			\ true for audio message, false for simple hang up

: fax_hang_up		\ ( -- )		\ answer in data mode (sounds like fax), wait then hang up
	15 G:sleep
	on_hook ;
	
: hang_up
		voice @ if audio_hang_up else fax_hang_up then ;
 
: von true voice ! ;
: voff false voice ! ;
 
"0" var, last_number	\ stores the most recent calling number

\ add last number to white or black lists	
: >w	last_number @ white ;
: >b	last_number @ black ;		
	
: init	\ ( -- )
	load_whitelist
	load_blacklist
	create_sound_data
	serial_init		\ setup serial port
	modem_init ;	\ setup modem	
	
"12345678901" var, number$	\ last incoming number or "PRIVATE"

  
: wait_for_call		\ ( -- s) get number string from next incoming call
		repeat
			get_line 
			dup 4 s:lsub "NMBR" s:=
			if							\ number found?
			  s:size 5 n:- s:rsub 		\ lose "NMBR=" 
			  ;;
			else
				drop
			then
		again
		;

: process_private		\ ( n$ -- ) number witheld
	drop ;

: process_unknown		\ ( n$ -- ) new number
	drop ;
	
: check_number	 \ ( number$ -- )

	\ do nothing if number is on whitelist
	dup whitelist @ in_list? 
	if drop "\tAccept" action ! ;; then

	\ hang up if number on blacklist
	dup blacklist @ in_list?
	if drop "\tBlocked" action ! hang_up ;; then 

	\ that leaves withheld and new/unknown numbers
	dup "--PRIVATE--" s:= if "\tWitheld" action ! process_private ;; then
	
	\ that leaves unknown
	dup "\tUnknown" action ! process_unknown ;

: process_number	\ (number$ -- ) store and process number 
	s:len 1 n:< if drop ;then	\ ignore empty string
	0 s:@ 80 n:=			\ does string start with "P" 
	if drop "--Private--" then
	s:len 11 n:= G:not		\ not a valid length?
	if 	
		"Invalid "			\ prepend "Invalid " to strings not 11 digits long
		swap s:+
	then
	dup last_number !		\ save number for in-call action
	dup check_number		\ process number according to type
	add_to_log				\ add call to log file 
	 ;
	
false var, task_end	
	
: cbtask	\ ( -- ) main loop run as a task
	init
	repeat
		"waiting for call" . time_date$ . cr
		wait_for_call			\ returns with number$ on stack
		process_number
		clear_serial			\ discard any chars returned from modem
	again
	;
	
 var cbtask_id 
		
: startcb		\ ( -- )
	"Starting call blocker\t" time_date$ s:+ "\r\n" s:+ 
	dup . 								\ start message to console
	wr_log							  	\ and log file	
	' cbtask t:task 
	cbtask_id ! 
	;
	
	
: stopcb		\ ( -- )
	"Stopping call blocker\t" time_date$ s:+ "\r\n" s:+ 
	dup . 
	wr_log
	cbtask_id @ 1 t:kill 
	on_hook
	"...stopped" . cr .s ;

: restart	stopcb startcb ;
	
.s
von
 startcb
	