\ audio.8th  D:\.8th\mylibs\libs\CallBlock\audio.8th

"audio" .cf

\ see https://iotbytes.wordpress.com/play-audio-file-on-phone-line-with-raspberry-pi/

\ audio files should be:
\ 	mono
\	8000Hz sample rate
\   .wav format
\   8-bit PCM encoding

modem? @ #if

0 b:new var, sound_data 

: add_byte	\ (buff,byte -- buff) add a byte to buffer
	1 b:new true b:writable 0 rot b:! b:+ ;

\ any byte of data equivalent to <DLE> must be shielded with additional <DLE> otherwise the data tx will terminate.
		
: check_data	\ ( b,byte -- b)	\ add byte to buffer, twice if <DLE>
	dup >r add_byte
	r>  <DLE> n:= if <DLE> add_byte then ;
		
: load_sound_data		\ ( -- ) read sound file into buffer doubling up on all <DLE> bytes (DLE shielding)
	0 b:new true b:writable				\ empty buffer for processed data
	soundfile @ f:slurp					\ raw sound data
	( check_data ) b:each!				\ copy to processed string but double up on <DLE> bytes
	sound_data ! ;

: send_sound  \ (--)
	cr "sending audio..." . cr
	sound_data @ send_string ;
	
#else

\ for testing without modem, sound is played over speaker
requires sound 

var audio

: load_sound_data
	soundfile @ snd:new audio ! ;
 
: send_sound	\ (--)
	audio @ snd:len swap snd:play G:sleep ;

#then	
		
: audio_hang_up		\ (--) 			\ answer in voice mode, play soundfile, hang up
	set_voice_mode
	send_sound						\ send .wav file of recorded voice message
	end_voice_call ;

	
